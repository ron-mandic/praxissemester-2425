{
  internal: Symbol(Deno.internal),
  Process: [class Process],
  run: [Function: run],
  isatty: [Function: isatty],
  writeFileSync: [Function: writeFileSync],
  writeFile: [AsyncFunction: writeFile],
  writeTextFileSync: [Function: writeTextFileSync],
  writeTextFile: [Function: writeTextFile],
  readTextFile: [AsyncFunction: readTextFile],
  readTextFileSync: [Function: readTextFileSync],
  readFile: [AsyncFunction: readFile],
  readFileSync: [Function: readFileSync],
  watchFs: [Function: watchFs],
  chmodSync: [Function: chmodSync],
  chmod: [AsyncFunction: chmod],
  chown: [AsyncFunction: chown],
  chownSync: [Function: chownSync],
  copyFileSync: [Function: copyFileSync],
  cwd: [Function: cwd],
  makeTempDirSync: [Function: makeTempDirSync],
  makeTempDir: [Function: makeTempDir],
  makeTempFileSync: [Function: makeTempFileSync],
  makeTempFile: [Function: makeTempFile],
  memoryUsage: [Function: memoryUsage],
  mkdirSync: [Function: mkdirSync],
  mkdir: [AsyncFunction: mkdir],
  chdir: [Function: chdir],
  copyFile: [AsyncFunction: copyFile],
  readDirSync: [Function: readDirSync],
  readDir: [Function: readDir],
  readLinkSync: [Function: readLinkSync],
  readLink: [Function: readLink],
  realPathSync: [Function: realPathSync],
  realPath: [Function: realPath],
  removeSync: [Function: removeSync],
  remove: [AsyncFunction: remove],
  renameSync: [Function: renameSync],
  rename: [AsyncFunction: rename],
  version: { deno: "2.0.4", v8: "12.9.202.13-rusty", typescript: "5.6.2" },
  build: {
    target: "x86_64-pc-windows-msvc",
    arch: "x86_64",
    os: "windows",
    vendor: "pc",
    env: "msvc"
  },
  statSync: [Function: statSync],
  lstatSync: [Function: lstatSync],
  stat: [AsyncFunction: stat],
  lstat: [AsyncFunction: lstat],
  truncateSync: [Function: truncateSync],
  truncate: [AsyncFunction: truncate],
  errors: {
    NotFound: [class NotFound extends Error],
    PermissionDenied: [class PermissionDenied extends Error],
    ConnectionRefused: [class ConnectionRefused extends Error],
    ConnectionReset: [class ConnectionReset extends Error],
    ConnectionAborted: [class ConnectionAborted extends Error],
    NotConnected: [class NotConnected extends Error],
    AddrInUse: [class AddrInUse extends Error],
    AddrNotAvailable: [class AddrNotAvailable extends Error],
    BrokenPipe: [class BrokenPipe extends Error],
    AlreadyExists: [class AlreadyExists extends Error],
    InvalidData: [class InvalidData extends Error],
    TimedOut: [class TimedOut extends Error],
    Interrupted: [class Interrupted extends Error],
    WriteZero: [class WriteZero extends Error],
    WouldBlock: [class WouldBlock extends Error],
    UnexpectedEof: [class UnexpectedEof extends Error],
    BadResource: [class BadResource extends Error],
    Http: [class Http extends Error],
    Busy: [class Busy extends Error],
    NotSupported: [class NotSupported extends Error],
    FilesystemLoop: [class FilesystemLoop extends Error],
    IsADirectory: [class IsADirectory extends Error],
    NetworkUnreachable: [class NetworkUnreachable extends Error],
    NotADirectory: [class NotADirectory extends Error],
    NotCapable: [class NotCapable extends Error]
  },
  inspect: [Function: inspect],
  env: {
    get: [Function: getEnv],
    toObject: [Function: toObject],
    set: [Function: setEnv],
    has: [Function: has],
    delete: [Function: deleteEnv]
  },
  exit: [Function: exit],
  execPath: [Function: execPath],
  SeekMode: {
    "0": "Start",
    "1": "Current",
    "2": "End",
    Start: 0,
    Current: 1,
    End: 2
  },
  FsFile: [class FsFile],
  open: [AsyncFunction: open],
  openSync: [Function: openSync],
  create: [Function: create],
  createSync: [Function: createSync],
  stdin: Stdin {},
  stdout: Stdout {},
  stderr: Stderr {},
  connect: [AsyncFunction: connect],
  listen: [Function: listen],
  loadavg: [Function: loadavg],
  connectTls: [AsyncFunction: connectTls],
  listenTls: [Function: listenTls],
  startTls: [AsyncFunction: startTls],
  symlink: [AsyncFunction: symlink],
  symlinkSync: [Function: symlinkSync],
  link: [AsyncFunction: link],
  linkSync: [Function: linkSync],
  permissions: Permissions {},
  Permissions: [class Permissions],
  PermissionStatus: [class PermissionStatus extends EventTarget],
  serveHttp: [Function: serveHttp],
  serve: [Function: serve],
  resolveDns: [AsyncFunction: resolveDns],
  upgradeWebSocket: [Function: upgradeWebSocket],
  utime: [AsyncFunction: utime],
  utimeSync: [Function: utimeSync],
  kill: [Function: kill],
  addSignalListener: [Function: addSignalListener],
  removeSignalListener: [Function: removeSignalListener],
  refTimer: [Function: refTimer],
  unrefTimer: [Function: unrefTimer],
  osRelease: [Function: osRelease],
  osUptime: [Function: osUptime],
  hostname: [Function: hostname],
  systemMemoryInfo: [Function: systemMemoryInfo],
  networkInterfaces: [Function: networkInterfaces],
  consoleSize: [Function: consoleSize],
  gid: [Function: gid],
  uid: [Function: uid],
  Command: [class Command],
  ChildProcess: [class ChildProcess],
  dlopen: [Function: dlopen],
  UnsafeCallback: [class UnsafeCallback],
  UnsafePointer: [class UnsafePointer],
  UnsafePointerView: [class UnsafePointerView],
  UnsafeFnPointer: [class UnsafeFnPointer],
  umask: [Function: umask],
  HttpClient: [class HttpClient],
  createHttpClient: [Function: createHttpClient],
  test: [Function: test],
  bench: [Function: bench],
  pid: [Getter/Setter],
  ppid: [Getter/Setter],
  noColor: [Getter/Setter],
  args: [Getter/Setter],
  mainModule: [Getter/Setter],
  [Symbol(Deno.internal)]: {
    Console: [class Console],
    cssToAnsi: [Function: cssToAnsi],
    inspectArgs: [Function: inspectArgs],
    parseCss: [Function: parseCss],
    parseCssColor: [Function: parseCssColor],
    pathFromURL: [Function: pathFromURL],
    resourceForReadableStream: [Function: resourceForReadableStream],
    getIpcPipeRid: [Function (anonymous)],
    getExtraPipeRids: [Function (anonymous)],
    __setupChildProcessIpcChannel: [Function: setupChildProcessIpcChannel],
    resolverSymbol: Symbol(unstableSniResolver),
    serverNameSymbol: Symbol(unstableServerName),
    createTlsKeyResolver: [Function: createTlsKeyResolver],
    getCachedAbortSignal: [Function: getCachedAbortSignal],
    addTrailers: [Function: addTrailers],
    upgradeHttpRaw: [Function: upgradeHttpRaw],
    serveHttpOnListener: [Function: serveHttpOnListener],
    serveHttpOnConnection: [Function: serveHttpOnConnection],
    buildCaseInsensitiveCommaValueFinder: [Function: buildCaseInsensitiveCommaValueFinder],
    formatToCronSchedule: [Function: formatToCronSchedule],
    parseScheduleToString: [Function: parseScheduleToString],
    __initWorkerThreads: [Function (anonymous)],
    node: {
      initialize: [Function: initialize],
      loadCjsModule: [Function: loadCjsModule]
    },
    core: {
      ops: {
        op_napi_open: [Function: op_napi_open],
        op_set_exit_code: [Function: op_set_exit_code]
      },
      callConsole: [Function (anonymous)],
      console: Object [console] {
        debug: [Function: debug],
        error: [Function: error],
        info: [Function: info],
        log: [Function: log],
        warn: [Function: warn],
        dir: [Function: dir],
        dirxml: [Function: dirxml],
        table: [Function: table],
        trace: [Function: trace],
        group: [Function: group],
        groupCollapsed: [Function: groupCollapsed],
        groupEnd: [Function: groupEnd],
        clear: [Function: clear],
        count: [Function: count],
        countReset: [Function: countReset],
        assert: [Function: assert],
        profile: [Function: profile],
        profileEnd: [Function: profileEnd],
        time: [Function: time],
        timeLog: [Function: timeLog],
        timeEnd: [Function: timeEnd],
        timeStamp: [Function: timeStamp],
        context: [Function: context]
      },
      build: {
        target: "x86_64-pc-windows-msvc",
        arch: "x86_64",
        os: "windows",
        vendor: "pc",
        env: "msvc"
      },
      setBuildInfo: [Function: setBuildInfo],
      registerErrorBuilder: [Function: registerErrorBuilder],
      buildCustomError: [Function: buildCustomError],
      registerErrorClass: [Function: registerErrorClass],
      setUpAsyncStub: [Function: setUpAsyncStub],
      hasPromise: [Function: hasPromise],
      promiseIdSymbol: Symbol(Deno.core.internalPromiseId),
      internalRidSymbol: Symbol(Deno.internal.rid),
      resources: [Function: resources],
      eventLoopTick: [Function: eventLoopTick],
      BadResource: [class BadResource extends Error],
      BadResourcePrototype: [Error],
      Interrupted: [class Interrupted extends Error],
      InterruptedPrototype: [Error],
      NotCapable: [class NotCapable extends Error],
      NotCapablePrototype: [Error],
      refOpPromise: [Function: refOpPromise],
      unrefOpPromise: [Function: unrefOpPromise],
      setReportExceptionCallback: [Function: setReportExceptionCallback],
      setPromiseHooks: [Function: setPromiseHooks],
      consoleStringify: [Function: consoleStringify],
      close: [Function: op_close],
      tryClose: [Function: op_try_close],
      read: [Function: op_read],
      readAll: [Function: op_read_all],
      write: [Function: op_write],
      writeAll: [Function: op_write_all],
      writeTypeError: [Function: op_write_type_error],
      readSync: [Function: op_read_sync],
      writeSync: [Function: op_write_sync],
      shutdown: [Function: op_shutdown],
      isTerminal: [Function: op_is_terminal],
      print: [Function: print],
      setLeakTracingEnabled: [Function: setLeakTracingEnabled],
      isLeakTracingEnabled: [Function: isLeakTracingEnabled],
      getAllLeakTraces: [Function: getAllLeakTraces],
      getLeakTraceForPromise: [Function: getLeakTraceForPromise],
      setMacrotaskCallback: [Function: setMacrotaskCallback],
      setNextTickCallback: [Function: setNextTickCallback],
      runMicrotasks: [Function: runMicrotasks],
      hasTickScheduled: [Function: hasTickScheduled],
      setHasTickScheduled: [Function: setHasTickScheduled],
      evalContext: [Function: evalContext],
      hostObjectBrand: Symbol(Deno.core.hostObject),
      encode: [Function: encode],
      encodeBinaryString: [Function: encodeBinaryString],
      decode: [Function: decode],
      serialize: [Function: serialize],
      deserialize: [Function: deserialize],
      getPromiseDetails: [Function: getPromiseDetails],
      getProxyDetails: [Function: getProxyDetails],
      isAnyArrayBuffer: [Function: isAnyArrayBuffer],
      isArgumentsObject: [Function: isArgumentsObject],
      isArrayBuffer: [Function: isArrayBuffer],
      isArrayBufferView: [Function: isArrayBufferView],
      isAsyncFunction: [Function: isAsyncFunction],
      isBigIntObject: [Function: isBigIntObject],
      isBooleanObject: [Function: isBooleanObject],
      isBoxedPrimitive: [Function: isBoxedPrimitive],
      isDataView: [Function: isDataView],
      isDate: [Function: isDate],
      isGeneratorFunction: [Function: isGeneratorFunction],
      isGeneratorObject: [Function: isGeneratorObject],
      isMap: [Function: isMap],
      isMapIterator: [Function: isMapIterator],
      isModuleNamespaceObject: [Function: isModuleNamespaceObject],
      isNativeError: [Function: isNativeError],
      isNumberObject: [Function: isNumberObject],
      isPromise: [Function: isPromise],
      isProxy: [Function: isProxy],
      isRegExp: [Function: isRegExp],
      isSet: [Function: isSet],
      isSetIterator: [Function: isSetIterator],
      isSharedArrayBuffer: [Function: isSharedArrayBuffer],
      isStringObject: [Function: isStringObject],
      isSymbolObject: [Function: isSymbolObject],
      isTypedArray: [Function: isTypedArray],
      isWeakMap: [Function: isWeakMap],
      isWeakSet: [Function: isWeakSet],
      memoryUsage: [Function: memoryUsage],
      setWasmStreamingCallback: [Function: setWasmStreamingCallback],
      abortWasmStreaming: [Function: abortWasmStreaming],
      destructureError: [Function: destructureError],
      opNames: [Function: opNames],
      eventLoopHasMoreWork: [Function: eventLoopHasMoreWork],
      byteLength: [Function: byteLength],
      addMainModuleHandler: [Function: addMainModuleHandler],
      setHandledPromiseRejectionHandler: [Function: setHandledPromiseRejectionHandler],
      setUnhandledPromiseRejectionHandler: [Function: setUnhandledPromiseRejectionHandler],
      reportUnhandledException: [Function: reportUnhandledException],
      reportUnhandledPromiseRejection: [Function: reportUnhandledPromiseRejection],
      queueUserTimer: [Function: queueUserTimer],
      queueSystemTimer: [Function: queueSystemTimer],
      queueImmediate: [Function: queueImmediate],
      cancelTimer: [Function: cancelTimer],
      refTimer: [Function: refTimer],
      unrefTimer: [Function: unrefTimer],
      getTimerDepth: [Function: getTimerDepth],
      currentUserCallSite: [Function: currentUserCallSite],
      wrapConsole: [Function: wrapConsole],
      v8Console: Object [console] {
        debug: [Function: debug],
        error: [Function: error],
        info: [Function: info],
        log: [Function: log],
        warn: [Function: warn],
        dir: [Function: dir],
        dirxml: [Function: dirxml],
        table: [Function: table],
        trace: [Function: trace],
        group: [Function: group],
        groupCollapsed: [Function: groupCollapsed],
        groupEnd: [Function: groupEnd],
        clear: [Function: clear],
        count: [Function: count],
        countReset: [Function: countReset],
        assert: [Function: assert],
        profile: [Function: profile],
        profileEnd: [Function: profileEnd],
        time: [Function: time],
        timeLog: [Function: timeLog],
        timeEnd: [Function: timeEnd],
        timeStamp: [Function: timeStamp],
        context: [Function: context]
      },
      propReadOnly: [Function: propReadOnly],
      propWritable: [Function: propWritable],
      propNonEnumerable: [Function: propNonEnumerable],
      propGetterOnly: [Function: propGetterOnly],
      propWritableLazyLoaded: [Function: propWritableLazyLoaded],
      propNonEnumerableLazyLoaded: [Function: propNonEnumerableLazyLoaded],
      createLazyLoader: [Function: createLazyLoader],
      createCancelHandle: [Function: createCancelHandle],
      getAsyncContext: [Function: getContinuationPreservedEmbedderData],
      setAsyncContext: [Function: setContinuationPreservedEmbedderData],
      AsyncVariable: [class AsyncVariable]
    }
  }
}
